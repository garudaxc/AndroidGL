From 048621e784542263a8d03284e9ba5c79703ccd5b Mon Sep 17 00:00:00 2001
From: garudaxc <garuda_xc@126.com>
Date: Wed, 17 Feb 2016 20:16:30 +0800
Subject: etc1 support


diff --git a/androidGL.sln b/androidGL.sln
index 9101b12..936abe5 100644
--- a/androidGL.sln
+++ b/androidGL.sln
@@ -27,7 +27,6 @@ Global
 		{83E97581-D4CC-4E84-A649-CC2F9854B6B0}.Release|Win32.ActiveCfg = Release|Win32
 		{83E97581-D4CC-4E84-A649-CC2F9854B6B0}.Release|x64.ActiveCfg = Release|Win32
 		{27D13C93-5F89-4977-A339-0AE47D16475A}.Debug|Win32.ActiveCfg = Debug|Win32
-		{27D13C93-5F89-4977-A339-0AE47D16475A}.Debug|Win32.Build.0 = Debug|Win32
 		{27D13C93-5F89-4977-A339-0AE47D16475A}.Debug|x64.ActiveCfg = Debug|Win32
 		{27D13C93-5F89-4977-A339-0AE47D16475A}.Release|Win32.ActiveCfg = Release|Win32
 		{27D13C93-5F89-4977-A339-0AE47D16475A}.Release|Win32.Build.0 = Release|Win32
diff --git a/androidGL.vcxproj b/androidGL.vcxproj
index e544a0b..7c5b9db 100644
--- a/androidGL.vcxproj
+++ b/androidGL.vcxproj
@@ -112,6 +112,7 @@
     <ClCompile Include="code\android\jniMain.cpp" />
     <ClCompile Include="code\android\MessageQueue.cpp" />
     <ClCompile Include="code\android\Sensor.cpp" />
+    <ClCompile Include="code\android\TextureFormat.cpp" />
     <ClCompile Include="code\android\Thread.cpp" />
     <ClCompile Include="code\android\TrackDropping.cpp" />
     <ClCompile Include="code\android\draw.cpp" />
diff --git a/androidGL.vcxproj.filters b/androidGL.vcxproj.filters
index bb75838..e1d3738 100644
--- a/androidGL.vcxproj.filters
+++ b/androidGL.vcxproj.filters
@@ -228,6 +228,9 @@
     <ClCompile Include="code\thirdParty\etc1\etc1.cpp">
       <Filter>Source files\thirdParty\etc1</Filter>
     </ClCompile>
+    <ClCompile Include="code\android\TextureFormat.cpp">
+      <Filter>Source files\android</Filter>
+    </ClCompile>
   </ItemGroup>
   <ItemGroup>
     <Xml Include="AndroidManifest.xml">
diff --git a/code/Texture.cpp b/code/Texture.cpp
index 588167e..34cb4e6 100644
--- a/code/Texture.cpp
+++ b/code/Texture.cpp
@@ -4,6 +4,7 @@
 #include "thirdParty/stb/stb_image.h"
 #include "FileSystem.h"
 #include <vector>
+#include "TextureFormat.h"
 
 using namespace std;
 
@@ -193,9 +194,20 @@ namespace FancyTech
 		return true;
 	}
 
+	bool StrPostfix(const char* str, const char* fix)
+	{
+		const char* sub = strstr(str, fix);
+		if (sub != NULL && (sub - str) == strlen(str) - strlen(fix)) {
+			return true;
+		}
+
+		return false;
+	}
+
 
 	bool Texture::Load(const char* fileName)
 	{
+		target_ = GL_TEXTURE_2D;
 		int w, h, comp;
 
 		//ubyte_t* buffer = NULL;
@@ -214,6 +226,15 @@ namespace FancyTech
 		file->Read(&buffer[0], file->Size());
 		file->Close();
 
+		if (StrPostfix(fileName, ".pkm")) {
+			GLog.LogInfo("load pkm texture file!");
+
+			texId_ = LoadPKM(&buffer[0], buffer.size());
+			if (texId_ != 0) {
+				return true;
+			}
+		}
+
 		//stbi_uc * t = stbi_load(fileName, &w, &h, &comp, 0);
 		stbi_uc* t = stbi_load_from_memory(&buffer[0], buffer.size(), &w, &h, &comp, 0);
 		if (t == NULL){
@@ -227,7 +248,6 @@ namespace FancyTech
 			return false;
 		}
 
-		target_ = GL_TEXTURE_2D;
 		int format = 0;
 		if (comp == 3){
 			format = GL_RGB;
@@ -236,19 +256,25 @@ namespace FancyTech
 			format = GL_RGBA;
 		}
 
+		texId_ = CreateTexture(t, w, h, comp, comp * w);
+		if (texId_ != 0) {
+			stbi_image_free(t);
+			return true;
+		}
+
 		glGenTextures(1, &texId_);
 		glBindTexture(target_, texId_);
 
 		glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
 		glTexImage2D(target_, 0, format, w, h, 0, format, GL_UNSIGNED_BYTE, t);
 		checkGlError("glTexImage2D");
-		glGenerateMipmap(GL_TEXTURE_2D);
+		glGenerateMipmap(target_);
 
 		// Draw left quad with repeat wrap mode
-		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
-		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
-		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_LINEAR);
-		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+		glTexParameteri(target_, GL_TEXTURE_WRAP_S, GL_REPEAT);
+		glTexParameteri(target_, GL_TEXTURE_WRAP_T, GL_REPEAT);
+		glTexParameteri(target_, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_LINEAR);
+		glTexParameteri(target_, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
 
 		glBindTexture(target_, 0);
 		stbi_image_free(t);
diff --git a/code/TextureFormat.h b/code/TextureFormat.h
index 9e0ed6f..6aafee6 100644
--- a/code/TextureFormat.h
+++ b/code/TextureFormat.h
@@ -1,15 +1,21 @@
 #include "Platfrom.h"
 
-enum TEXTURE_FORMAT
+namespace FancyTech
 {
-	RGB8,
-	RGBA8,
-	ETC1,
-	ETC2,
-	DXT1,
-	DXT5,
-};
 
+	enum TEXTURE_FORMAT
+	{
+		RGB8,
+		RGBA8,
+		ETC1,
+		ETC2,
+		DXT1,
+		DXT5,
+	};
 
-GLuint CreateTexture(const uint8_t* data, uint32_t w, uint32_t h, uint32_t stride);
 
+	GLuint CreateTexture(const ubyte_t* data, uint32_t w, uint32_t h,
+		uint32_t pixelsize, uint32_t stride);
+
+	GLuint LoadPKM(const ubyte_t* fileData, uint32_t size);
+}
diff --git a/code/android/TextureFormat.cpp b/code/android/TextureFormat.cpp
index a005674..efe829e 100644
--- a/code/android/TextureFormat.cpp
+++ b/code/android/TextureFormat.cpp
@@ -1,30 +1,102 @@
 #include "thirdParty/etc1/etc1.h"
+#include "TextureFormat.h"
 #include "MyLog.h"
+#include "glUtil.h"
 
-GLuint CreateTexture(const uint8_t* data, uint32_t w, uint32_t h,
-						uint32_t pixelsize, uint32_t stride)
+namespace FancyTech
 {
-	if (data == NULL || w == 0 || h == 0) {
-		GLog.LogError("CreateTexture invalid parameter data %p w %d h %d", data, w, h);
-		return 0;
-	}
 
-	uint32_t size = etc1_get_encoded_data_size(w, h);
-	uint8_t* buffer = (uint8_t*)malloc(size);
+	GLuint CreateTexture(const ubyte_t* data, uint32_t w, uint32_t h,
+		uint32_t pixelsize, uint32_t stride)
+	{
+		if (data == NULL || w == 0 || h == 0) {
+			GLog.LogError("CreateTexture invalid parameter data %p w %d h %d", data, w, h);
+			return 0;
+		}
 
-	if (buffer == NULL)	{
-		GLog.LogError("malloc failed size %u", size);
-		return 0;
-	}
+		uint32_t size = etc1_get_encoded_data_size(w, h);
+		GLog.LogInfo("etc1_get_encoded_data_size %u", size);
+
+		uint8_t* buffer = (uint8_t*)malloc(size);
+
+		if (buffer == NULL)	{
+			GLog.LogError("malloc failed size %u", size);
+			return 0;
+		}
+		uint32_t time = GetTicksMS();
+		if (etc1_encode_image(data, w, h, pixelsize, stride, buffer) != 0) {
+			GLog.LogError("etc1_encode_image failed!");
+			free(buffer);
+			return 0;
+		}
+		GLog.LogInfo("etc1 encode time %u ms", GetTicksMS() - time);
+
+		GLuint tex;
+		glGenTextures(1, &tex);
+		glBindTexture(GL_TEXTURE_2D, tex);
+
+		//glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
+		uint32_t internalfmt = GL_ETC1_RGB8_OES;
+
+		glCompressedTexImage2D(GL_TEXTURE_2D, 0, internalfmt, w, h, 0, size, buffer);
+
+		checkGlError("glCompressedTexImage2D");
+
+		//glGenerateMipmap(GL_TEXTURE_2D);
+
+		// Draw left quad with repeat wrap mode
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+		//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_LINEAR);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+
+		glBindTexture(GL_TEXTURE_2D, 0);
 
-	if (etc1_encode_image(data, w, h, pixelsize, stride, buffer) != 0) {
-		GLog.LogError("etc1_encode_image failed!");
 		free(buffer);
-		return 0;
+
+		return tex;
 	}
 
 
+	GLuint LoadPKM(const ubyte_t* fileData, uint32_t size)
+	{
+		if (!etc1_pkm_is_valid(fileData)) {
+			GLog.LogError("pkm file header invalid!");
+			return 0;
+		}
+		
+		uint32_t width	= etc1_pkm_get_width(fileData);
+		uint32_t height = etc1_pkm_get_height(fileData);
+
+		GLog.LogInfo("pkm file width %d height %d", width, height);
+
+		GLuint tex;
+		glGenTextures(1, &tex);
+		glBindTexture(GL_TEXTURE_2D, tex);
+
+		//glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
+		uint32_t internalfmt = GL_ETC1_RGB8_OES;
+
+		glCompressedTexImage2D(GL_TEXTURE_2D, 0, internalfmt, width, height, 
+							0, size - ETC_PKM_HEADER_SIZE, 
+							fileData + ETC_PKM_HEADER_SIZE);
+
+		checkGlError("glCompressedTexImage2D");
+
+		//glGenerateMipmap(GL_TEXTURE_2D);
+
+		// Draw left quad with repeat wrap mode
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+		//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST_MIPMAP_LINEAR);
+		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+
+		glBindTexture(GL_TEXTURE_2D, 0);
+
+		return tex;
+	}
 
 
-	return 0;
 }
\ No newline at end of file
diff --git a/code/android/draw.cpp b/code/android/draw.cpp
index 320bff8..32e3e55 100644
--- a/code/android/draw.cpp
+++ b/code/android/draw.cpp
@@ -77,23 +77,23 @@ int setupGraphics(int w, int h) {
 	spriteBatch.Init(256);
 
 	ModelInstance* model = NULL;
-	//model = CreateModel("build_tower003.mesh", "1.png");
-	//model->transform_ = Matrix4f::Transform(Quaternionf::IDENTITY, Vector3f(-1.0f, 1.0f, 0.0f));
-	//Models.push_back(model);
+	model = CreateModel("build_tower003.mesh", "test.png");
+	model->transform_ = Matrix4f::Transform(Quaternionf::IDENTITY, Vector3f(-1.0f, 1.0f, 0.0f));
+	Models.push_back(model);
 
 	//model = CreateModel("build_house008.mesh", "1.png");
 	//model->transform_ = Matrix4f::Transform(Quaternionf::IDENTITY, Vector3f(1.5f, 2.0f, 0.0f));
 	//Models.push_back(model);
 
-#if TEST_MODEL
-	model = CreateModel("Box01.mesh", "2.png");
-	model->transform_ = Matrix4f::Transform(Quaternionf::IDENTITY, Vector3f(0.0f, 0.0f, 0.0f));
-	Models.push_back(model);
-#else
-	model = CreateModel("Box001.mesh", "2.png");
-	model->transform_ = Matrix4f::Transform(Quaternionf::IDENTITY, Vector3f(0.0f, 0.0f, 0.0f));
-	Models.push_back(model);
-#endif
+//#if TEST_MODEL
+//	model = CreateModel("Box01.mesh", "2.png");
+//	model->transform_ = Matrix4f::Transform(Quaternionf::IDENTITY, Vector3f(0.0f, 0.0f, 0.0f));
+//	Models.push_back(model);
+//#else
+//	model = CreateModel("Box001.mesh", "2.png");
+//	model->transform_ = Matrix4f::Transform(Quaternionf::IDENTITY, Vector3f(0.0f, 0.0f, 0.0f));
+//	Models.push_back(model);
+//#endif
 
 	checkGlError("CreateModel");
 	GLog.LogInfo("create model finished");
@@ -114,7 +114,7 @@ void DrawView(int x, int y, int w, int h, float eyeOffset)
 	Matrix4f mView, mEyeOffset;
 
 #if TEST_MODEL
-	mView = Matrix4f::LookAtRH(Vector3f(0.f, -3.0f, 0.0f), Vector3f(0.0f, 0.0f, 0.0f), Vector3f::UNIT_Z);
+	mView = Matrix4f::LookAtRH(Vector3f(0.f, -6.0f, 0.0f), Vector3f(0.0f, 0.0f, 0.0f), Vector3f::UNIT_Z);
 #else
 	mView = _GetDeviceRotationMatrix();
 #endif
@@ -146,13 +146,13 @@ void DrawView(int x, int y, int w, int h, float eyeOffset)
 		(*it)->texture_.Bind();
 				
 		Model& mesh = (*it)->mesh_;
-		//mesh.Bind();
-		//for (int i = 0; i < mesh.GetElementCount(); i++) {
-		//	const ModelElement* e = mesh.GetElement(i);
+		mesh.Bind();
+		for (int i = 0; i < mesh.GetElementCount(); i++) {
+			const ModelElement* e = mesh.GetElement(i);
 
-		//	void* index = (void*)(e->indexOffset * sizeof(unsigned short));
-		//	glDrawElements(GL_TRIANGLES, e->indexCount, GL_UNSIGNED_SHORT, index);
-		//}
+			void* index = (void*)(e->indexOffset * sizeof(unsigned short));
+			glDrawElements(GL_TRIANGLES, e->indexCount, GL_UNSIGNED_SHORT, index);
+		}
 	}
 }
 
@@ -224,26 +224,25 @@ void renderFrame() {
 	//glEnable(GL_CULL_FACE);
 	glEnable(GL_DEPTH_TEST);
 
-	float lineHeight = -30.0f;
-	Vector3f pos(10.f, glState.height - 10.f, 0.f);
+	//float lineHeight = -30.0f;
+	//Vector3f pos(10.f, glState.height - 10.f, 0.f);
 
-	char buff[64];
-	sprintf(buff, "fps %.2f   %d bpm", Time.GetFPS(), bpm_);
-	bitmapFont.DrawString(&spriteBatch, buff, pos);
-	spriteBatch.Commit(glState.width, glState.height);
+	//char buff[64];
+	//sprintf(buff, "fps %.2f   %d bpm", Time.GetFPS(), bpm_);
+	//bitmapFont.DrawString(&spriteBatch, buff, pos);
+	//spriteBatch.Commit(glState.width, glState.height);
 
-	if (!audioInited) {
-		return;
-	}
-
-	pos.Set(glState.width / 2, glState.height / 2, 0.f);
-	sprintf(buff, "%u", GAudioSystem.GetPosition());
-	bitmapFont.DrawString(&spriteBatch, buff, pos, 5);
+	//if (!audioInited) {
+	//	return;
+	//}
 
-	//float eyeDistance = EyeDistance.GetFloat();
+	//pos.Set(glState.width / 2, glState.height / 2, 0.f);
+	//sprintf(buff, "%u", GAudioSystem.GetPosition());
+	//bitmapFont.DrawString(&spriteBatch, buff, pos, 5);
 
-	////DrawView(0, 0, glState.width / 2, glState.height, eyeDistance / 2.f);
-	////DrawView(glState.width / 2, 0, glState.width / 2, glState.height, -eyeDistance / 2.f);
+	float eyeDistance = EyeDistance.GetFloat();
+	DrawView(0, 0, glState.width / 2, glState.height, eyeDistance / 2.f);
+	DrawView(glState.width / 2, 0, glState.width / 2, glState.height, -eyeDistance / 2.f);
 
 	//DrawCalibration(glState.width, glState.height, bitmapFont, spriteBatch);
 
diff --git a/jni/Android.mk b/jni/Android.mk
index 11b69a9..809c568 100644
--- a/jni/Android.mk
+++ b/jni/Android.mk
@@ -32,7 +32,7 @@ LOCAL_CPPFLAGS := -std=c++11
 
 LOCAL_MODULE    := aurora-native
 #VisualGDBAndroid: AutoUpdateSourcesInNextLine
-LOCAL_SRC_FILES := ../code/android/device.cpp ../code/android/InputAndroid.cpp ../code/android/jniMain.cpp ../code/android/MessageQueue.cpp ../code/android/Sensor.cpp ../code/android/Thread.cpp ../code/android/TrackDropping.cpp ../code/android/draw.cpp ../code/android/MyLog.cpp ../code/android/PlatfromAndroid.cpp ../code/android/UsbDevice.cpp ../code/audio/audio.cpp ../code/audio/WavFile.cpp ../code/AurMath.cpp ../code/BitmapFont.cpp ../code/Calibration.cpp ../code/CommandSystem.cpp ../code/FileSystem.cpp ../code/GlobalVar.cpp ../code/glUtil.cpp ../code/Input.cpp ../code/Model.cpp ../code/ShaderManager.cpp ../code/SpriteBatch.cpp ../code/Texture.cpp ../code/thirdParty/etc1/etc1.cpp ../code/thirdParty/stb/stb_image.c ../code/thirdParty/zip/ioapi.c ../code/thirdParty/zip/unzip.c ../code/Timer.cpp
+LOCAL_SRC_FILES := ../code/android/device.cpp ../code/android/InputAndroid.cpp ../code/android/jniMain.cpp ../code/android/MessageQueue.cpp ../code/android/Sensor.cpp ../code/android/TextureFormat.cpp ../code/android/Thread.cpp ../code/android/TrackDropping.cpp ../code/android/draw.cpp ../code/android/MyLog.cpp ../code/android/PlatfromAndroid.cpp ../code/android/UsbDevice.cpp ../code/audio/audio.cpp ../code/audio/WavFile.cpp ../code/AurMath.cpp ../code/BitmapFont.cpp ../code/Calibration.cpp ../code/CommandSystem.cpp ../code/FileSystem.cpp ../code/GlobalVar.cpp ../code/glUtil.cpp ../code/Input.cpp ../code/Model.cpp ../code/ShaderManager.cpp ../code/SpriteBatch.cpp ../code/Texture.cpp ../code/thirdParty/etc1/etc1.cpp ../code/thirdParty/stb/stb_image.c ../code/thirdParty/zip/ioapi.c ../code/thirdParty/zip/unzip.c ../code/Timer.cpp
 LOCAL_LDLIBS    := -llog -landroid -lEGL -lGLESv2 -lz -lOpenSLES
 
 # LOCAL_STATIC_LIBRARIES := android_native_app_glue
diff --git a/jni/Android.mk.old b/jni/Android.mk.old
index 26499c6..11b69a9 100644
--- a/jni/Android.mk.old
+++ b/jni/Android.mk.old
@@ -32,7 +32,7 @@ LOCAL_CPPFLAGS := -std=c++11
 
 LOCAL_MODULE    := aurora-native
 #VisualGDBAndroid: AutoUpdateSourcesInNextLine
-LOCAL_SRC_FILES := ../code/android/device.cpp ../code/android/InputAndroid.cpp ../code/android/jniMain.cpp ../code/android/MessageQueue.cpp ../code/android/Sensor.cpp ../code/android/Thread.cpp ../code/android/TrackDropping.cpp ../code/android/draw.cpp ../code/android/MyLog.cpp ../code/android/PlatfromAndroid.cpp ../code/android/UsbDevice.cpp ../code/audio/audio.cpp ../code/audio/WavFile.cpp ../code/AurMath.cpp ../code/BitmapFont.cpp ../code/Calibration.cpp ../code/CommandSystem.cpp ../code/FileSystem.cpp ../code/GlobalVar.cpp ../code/glUtil.cpp ../code/Input.cpp ../code/Model.cpp ../code/ShaderManager.cpp ../code/SpriteBatch.cpp ../code/Texture.cpp ../code/thirdParty/stb/stb_image.c ../code/thirdParty/zip/ioapi.c ../code/thirdParty/zip/unzip.c ../code/Timer.cpp
+LOCAL_SRC_FILES := ../code/android/device.cpp ../code/android/InputAndroid.cpp ../code/android/jniMain.cpp ../code/android/MessageQueue.cpp ../code/android/Sensor.cpp ../code/android/Thread.cpp ../code/android/TrackDropping.cpp ../code/android/draw.cpp ../code/android/MyLog.cpp ../code/android/PlatfromAndroid.cpp ../code/android/UsbDevice.cpp ../code/audio/audio.cpp ../code/audio/WavFile.cpp ../code/AurMath.cpp ../code/BitmapFont.cpp ../code/Calibration.cpp ../code/CommandSystem.cpp ../code/FileSystem.cpp ../code/GlobalVar.cpp ../code/glUtil.cpp ../code/Input.cpp ../code/Model.cpp ../code/ShaderManager.cpp ../code/SpriteBatch.cpp ../code/Texture.cpp ../code/thirdParty/etc1/etc1.cpp ../code/thirdParty/stb/stb_image.c ../code/thirdParty/zip/ioapi.c ../code/thirdParty/zip/unzip.c ../code/Timer.cpp
 LOCAL_LDLIBS    := -llog -landroid -lEGL -lGLESv2 -lz -lOpenSLES
 
 # LOCAL_STATIC_LIBRARIES := android_native_app_glue
